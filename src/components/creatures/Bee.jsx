/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

const ACTION__MAP = {
	death: "CharacterArmature|Death",
	fastFlying: "CharacterArmature|Fast_Flying",
	flyingIdle: "CharacterArmature|Flying_Idle",
	headButt: "CharacterArmature|Headbutt",
	hitReact: "CharacterArmature|HitReact",
	no: "CharacterArmature|No",
	punch: "CharacterArmature|Punch",
	yes: "CharacterArmature|Yes",
};

export function Bee(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF("/models/Armabee.glb");
	const { actions } = useAnimations(animations, group);

	const beeRef = useRef();

	const [isClicked, setIsClicked] = useState(false);
	const [isHovered, setIsHovered] = useState(false);

	const timeoutRef = useRef(null);

	useEffect(() => {
		if (!actions) {
			console.log("Actions missing in Bee component");
			return;
		}
		const playIdleAnimation = () => {
			const idleAnimation = ACTION__MAP["yes"];
			const idleAction = actions[idleAnimation];
			console.log(`Animation to play: ${idleAnimation} and ${idleAction}`);
			console.log("Idle animation ", idleAnimation);

			if (timeoutRef.current) {
				clearTimeout(timeoutRef.current);
			}
			// if currentActionRef.current fade out
			// resetLoop
			// set action ref
		};
	}, [actions, isClicked]);

	const handleClick = (event) => {
		event.stopPropagation();
		setIsClicked(true);
		// if an animation is playing fade out
		// get another random action from action map
		// play that animation 3 times
		let randomAction = Math.floor(Math.random(ACTION__MAP.length, 1));
		if (randomAction === 7) {
			randomAction = 6;
		}
		setIsClicked(false);
	};

	return (
		<group ref={group} {...props} dispose={null}>
			<group name='Root_Scene'>
				<group name='RootNode'>
					<group
						name='CharacterArmature'
						rotation={[-Math.PI / 2, 0, 0]}
						scale={100}>
						<primitive object={nodes.Root} />
					</group>
					<group name='Armabee' rotation={[-Math.PI / 2, 0, 0]} scale={100}>
						<skinnedMesh
							name='Armabee_1'
							geometry={nodes.Armabee_1.geometry}
							material={materials.Armabee_Main}
							skeleton={nodes.Armabee_1.skeleton}
						/>
						<skinnedMesh
							name='Armabee_2'
							geometry={nodes.Armabee_2.geometry}
							material={materials.Armabee_Secondary}
							skeleton={nodes.Armabee_2.skeleton}
						/>
						<skinnedMesh
							name='Armabee_3'
							geometry={nodes.Armabee_3.geometry}
							material={materials.Eye_White}
							skeleton={nodes.Armabee_3.skeleton}
						/>
						<skinnedMesh
							name='Armabee_4'
							geometry={nodes.Armabee_4.geometry}
							material={materials.Eye_Black}
							skeleton={nodes.Armabee_4.skeleton}
						/>
						<skinnedMesh
							name='Armabee_5'
							geometry={nodes.Armabee_5.geometry}
							material={materials.Wings}
							skeleton={nodes.Armabee_5.skeleton}
						/>
					</group>
				</group>
			</group>
		</group>
	);
}

useGLTF.preload("/models/Armabee.glb");
